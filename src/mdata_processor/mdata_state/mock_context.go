// Code generated by mockery v1.0.0. DO NOT EDIT.

package mdata_state

import mock "github.com/stretchr/testify/mock"

// mockContext is an autogenerated mock type for the context type
type mockContext struct {
	mock.Mock
}

// DeleteState provides a mock function with given fields: _a0
func (_m *mockContext) DeleteState(_a0 []string) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields: _a0
func (_m *mockContext) GetState(_a0 []string) (map[string][]byte, error) {
	ret := _m.Called(_a0)

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func([]string) map[string][]byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetState provides a mock function with given fields: _a0
func (_m *mockContext) SetState(_a0 map[string][]byte) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(map[string][]byte) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string][]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
